plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'maven-publish'
}

def config = rootProject.ext.android
def library = rootProject.ext.dependencies

android {
    compileSdk config.compileSdk

    defaultConfig {
        minSdk config.minSdk
        targetSdk config.targetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    //配置路由
    kapt {
        arguments {
            arg("ROUTER_MODULE_NAME", project.getName())
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility config.sourceCompatibility
        targetCompatibility config.targetCompatibility
    }

    kotlinOptions {
        jvmTarget = config.jvmTarget
    }

    buildFeatures {
        viewBinding true
    }

    //配置输出文件的名称
    /*libraryVariants.all{ variant->
        variant.outputs.all{
            def filename = ""
            if(buildType.name == 'release') {
                filename = "common_1.0.0.aar"
            } else {
                filename = "common_${buildType.name}_1.0.0.aar"
            }
            outputFileName = filename
        }
    }*/
}

dependencies {

    api library.core_ktx
    api library.appcompat
    api library.material
    api library.constraint_layout

    api library.activity_ktx
    api library.fragment_ktx
    api library.lifecycle_viewmodel_ktx
    api library.lifecycle_livedata_ktx
    api library.lifecycle_runtime_ktx


    api library.recycler_view_adapter
    api library.utils
    api library.network
    api library.register_annotation
    kapt library.register_compiler
    api library.lifecycle
    api library.widget
    api library.router_api
    kapt library.router_compiler
    api library.process_monitor
    api library.live_event_bus
    api library.xpopup
    api library.moshi
    kapt library.moshi_compiler

    implementation(library.image_coil) {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    implementation("io.coil-kt:coil-gif:2.1.0")
    //Toast框架
    implementation library.toast_utils

    implementation library.mmkv

    api (library.permissions) {
        exclude group: 'com.android.support', module: 'support-fragment'
    }

    api 'com.github.Kennyc1012:MultiStateView:2.2.0'

    api library.refresh_kernel
    api library.refresh_classics

    api library.tablayout_ext
    testImplementation library.java_junit
    androidTestImplementation library.android_junit
    androidTestImplementation library.espresso_core
}

/**
 * 上传到私有仓库
 */
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                //如果是war包填写components.web，如果是jar包填写components.java
                from components.release
                //指定group/artifact/version信息，可以不填。默认使用项目group/name/version作为groupId/artifactId/version
                groupId pom_groupId
                artifactId pom_artifactId
                version pom_version
                // aar文件所在的位置
                // module打包后所在路径为module模块下的build/outputs/aar，生成的aar名称为：module名-release.aar
                //artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            }
        }
        repositories {
            maven {
                allowInsecureProtocol = true
                //指定要上传的maven私服仓库
                url = warehouse
                //认证用户和密码
                credentials {
                    username warehouse_library_userName
                    password warehouse_library_password
                }
            }
        }
    }
}
